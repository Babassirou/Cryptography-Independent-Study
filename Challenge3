# Define a function for Caesar decryption
def caesar_decrypt(encoded_numbers, shift, alphabet_length):
    decoded_message = ""

    # Iterate through each number in the encoded string
    for number in encoded_numbers.split():
        if number.isdigit():
            # Convert the numeric character to an integer
            number = int(number)

            # Apply the Caesar cipher shift (decryption)
            decoded_number = number - shift

            # Wrap around the alphabet if the decoded number is less than 1
            if decoded_number < 1:
                decoded_number += alphabet_length

            # Convert the decoded number to the corresponding letter
            decoded_char = alphabet[(decoded_number - 1) % alphabet_length]  # Adjust for 0-based indexing

            # Append the decoded character to the message
            decoded_message += decoded_char

    # Return the final decoded message
    return decoded_message

# Define a function to decode with multiple shifts
def decode_with_multiple_shifts(encoded_numbers, num_shifts, alphabet_length):
    decoded_messages = []

    # Iterate through shifts from 0 to num_shifts
    for shift in range(0, num_shifts + 1):
        # Call the caesar_decrypt function for each shift
        decoded_message = caesar_decrypt(encoded_numbers, shift, alphabet_length)
        decoded_messages.append(decoded_message)

    # Return a list of decoded messages for each shift
    return decoded_messages

# Example usage:
# Encoded message and the number of shifts
encoded_numbers = "..."  # (truncated for brevity)
num_shifts = 19

# Define the alphabet
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ."
alphabet_length = len(alphabet)

# Call the decode_with_multiple_shifts function
decoded_messages = decode_with_multiple_shifts(encoded_numbers, num_shifts, alphabet_length)

# Display the decoded messages for each shift
for shift, decoded_message in enumerate(decoded_messages, start=1):
    print(f"Shift {shift}: {decoded_message}")
