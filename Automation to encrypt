import string

def create_caesar_matrix(shift):
    alphabet = string.ascii_letters + string.digits
    shifted_alphabet = alphabet[shift:] + alphabet[:shift]
    caesar_dict = {orig: shifted for orig, shifted in zip(alphabet, shifted_alphabet)}
    return caesar_dict

def caesar_cipher(text, shift, direction='encrypt'):
    alphabet_length = len(string.ascii_letters + string.digits)
    caesar_dict = create_caesar_matrix(shift)
    result = []

    for char in text:
        if char in caesar_dict:
            encoded_num = (ord(caesar_dict[char]) - ord('A')) % alphabet_length
            result.append(encoded_num)
        else:
            result.append(ord(char) % alphabet_length)

    return result

# Get user input for the message
message = input("Enter the message: ")

# Get user input for the shift value with validation
while True:
    try:
        shift = int(input("Enter the shift value: "))
        break
    except ValueError:
        print("Invalid input. Please enter a valid integer for the shift.")

# Encrypt the message and get the list of encoded numbers
encoded_message = caesar_cipher(message, shift, direction='encrypt')

encoded_message_str = ' '.join(str(num) for num in encoded_message)

# Display the results
print("Original Message:", message)
print("Encoded Message (as list of numbers):", encoded_message)
